plugins {
    id 'java'
    id 'idea'
    id 'org.sonarqube' version '3.4.0.2513'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '4.5.1'
    id 'io.codearte.nexus-staging' version '0.22.0'
    id 'de.marcphilipp.nexus-publish' version '0.4.0'
    id 'de.undercouch.download' version '4.1.1'
    id 'org.ajoberstar.git-publish' version '3.0.1'
}



ext {
    bouncycastleVersion = '1.73'
    jacksonVersion = '2.14.2'
    javaPoetVersion = '1.7.0'
    kotlinVersion = '1.3.72'
    kotlinPoetVersion = '1.5.0'
    jnr_unixsocketVersion = '0.38.17'
    okhttpVersion = '4.9.0'
    rxjavaVersion = '2.2.2'
    slf4jVersion = '1.7.30'
    javaWebSocketVersion = '1.5.3'
    picocliVersion = '3.0.0'
    ensAdraffyVersion = '0.1.2'
    // test dependencies
    equalsverifierVersion = '3.14.1'
    junitVersion = '5.5.2'
    web3jUnitVersion = '4.10.2'
    junitBenchmarkVersion = '0.7.2'
    logbackVersion = '1.2.3'
    mockitoJunitVersion = '3.1.0'
    junitPlatformLauncherVersion = '1.5.2'
}


description 'Web3j base project.'

[
    'jacoco',
    'java',
    'javadoc',
    'publish',
    'repositories',
    'spotless'
].each { buildScript ->
    download {
        src "https://raw.githubusercontent.com/web3j/build-tools/master/gradle/$buildScript/build.gradle"
        dest "$rootDir/gradle/$buildScript/build.gradle"
        overwrite false
        quiet true
        onlyIfModified true
    }
}

allprojects {
    apply {
        [
            'java',
            'javadoc',
            'repositories',
            'spotless'
        ].each { buildScript ->
            from("$rootDir/gradle/$buildScript/build.gradle")
        }
    }

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
        useJUnitPlatform()
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoJunitVersion"

        configurations.all {
            resolutionStrategy {
                force(group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlinVersion)
                force(group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlinVersion)
                force(group: "org.jetbrains.kotlin", name: "kotlin-stdlib-common", version: kotlinVersion)
                force(group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk7", version: kotlinVersion)
                force(group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlinVersion)
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion)
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion)
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion)
                force(group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion)
            }
        }
    }

    if (project.name != 'integration-tests' && project.name != 'web3j') {
        apply from: "$rootDir/gradle/publish/build.gradle"
    }
}
configure(subprojects.findAll { it.name != 'integration-tests' }) {
    apply from: "$rootDir/gradle/jacoco/build.gradle"
}

// Makes a submodule to be compiled against a reduced JDK, currently an Android JDK.
ext.useReducedJdk = { Project project ->
    // Use Android JDK instead of normal JDK in order to limit language APIs allowed in the project
    project.tasks.withType(JavaCompile) { Task task ->
        // As tests are run on a local Java VM they don't have to be compatible with Android JDK.
        if (task.name.contains("compileTest")) return
            javaCompiler = javaToolchains.compilerFor {
                languageVersion = JavaLanguageVersion.of(8)
            }
        options.bootstrapClasspath = files(
                // Contains lambda-related classes such as java.lang.invoke.LambdaMetafactory.
                // Copied from [android-sdk]/build-tools/34.0.0
                "$rootDir/compat/libs/core-lambda-stubs.jar",
                // Android JDK. Copied from [android-sdk]/platforms/android-24. All Android specific
                // packages were stripped. The only kept packages are:
                // java.*, javax.*, org.w3c.* and org.xml.*
                "$rootDir/compat/libs/android.jar")
    }
}


tasks.named("spotlessJava").configure { dependsOn("spotlessGroovyGradle") }
tasks.named("spotlessKotlin").configure { dependsOn("spotlessJava", "spotlessGroovyGradle") }
